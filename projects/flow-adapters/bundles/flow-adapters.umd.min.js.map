{"version":3,"sources":["ng://flow-adapters/lib/flow-adapters.service.ts","ng://flow-adapters/search-pagination/model.service.ts","ng://flow-adapters/entity/model.service.ts","ng://flow-adapters/lib/flow-adapters.module.ts"],"names":["FlowAdaptersService","Injectable","args","providedIn","SearchPaginationModelService","store","this","prototype","getModels","selectors","$ids","select","getIds","$loading","getLoading","$query","getQuery","$pagination","getPagination","dispatch","actions","_this","clear","params","search","searchSuccess","searchError","searchReload","Store","EntityModelService","$entities","getEntities","add","addSuccess","addError","findError","find","findSuccess","remove","removeSuccess","removeError","updateSuccess","updateError","update","FlowAdaptersModule","NgModule","imports","declarations","exports","providers"],"mappings":"oTAAA,IAAAA,EAAA,WAOE,SAAAA,gCALDC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,wJAHd,GCAAC,EAAA,WAiBE,SAAAA,EAAoBC,GAAAC,KAAAD,MAAAA,SAGpBD,EAAAG,UAAAC,UAAA,SAAaC,GAOX,MAAO,CACLC,KAPWJ,KAAKD,MAAMM,OAAOF,EAAUG,QAQvCC,SAPeP,KAAKD,MAAMM,OAAOF,EAAUK,YAQ3CC,OAPaT,KAAKD,MAAMM,OAAOF,EAAUO,UAQzCC,YAPkBX,KAAKD,MAAMM,OAAOF,EAAUS,iBAWlDd,EAAAG,UAAAY,SAAA,SAASC,GAAT,IAAAC,EAAAf,KAuBE,MAAO,CACLgB,MAtBY,SAACC,GACbF,EAAKhB,MAAMc,SAASC,EAAQE,MAAMC,KAsBlCC,OAnBa,SAACD,GACdF,EAAKhB,MAAMc,SAASC,EAAQI,OAAOD,KAmBnCE,cAZoB,SAACF,GACrBF,EAAKhB,MAAMc,SAASC,EAAQK,cAAcF,KAY1CG,YAjBkB,SAACH,GACnBF,EAAKhB,MAAMc,SAASC,EAAQM,YAAYH,KAiBxCI,aAVmB,SAACJ,GACpBF,EAAKhB,MAAMc,SAASC,EAAQO,aAAaJ,2BAxC9CtB,EAAAA,sDAdO2B,EAAAA,WAAR,GCAAC,EAAA,WAcE,SAAAA,EAAoBxB,GAAAC,KAAAD,MAAAA,SAGpBwB,EAAAtB,UAAAC,UAAA,SAAaC,GAGX,MAAO,CACLqB,UAHgBxB,KAAKD,MAAMM,OAAOF,EAAUsB,eAOhDF,EAAAtB,UAAAY,SAAA,SAASC,GAAT,IAAAC,EAAAf,KAoDE,MAAO,CACL0B,IAnDU,SAACT,GACXF,EAAKhB,MAAMc,SAASC,EAAQY,IAAIT,KAmDhCU,WAhDiB,SAACV,GAClBF,EAAKhB,MAAMc,SAASC,EAAQa,WAAWV,KAgDvCW,SA7Ce,SAACX,GAChBF,EAAKhB,MAAMc,SAASC,EAAQc,SAASX,KA6CrCY,UAlCgB,SAACZ,GACjBF,EAAKhB,MAAMc,SAASC,EAAQe,UAAUZ,KAkCtCa,KA3CW,SAACb,GACZF,EAAKhB,MAAMc,SAASC,EAAQgB,KAAKb,KA2CjCc,YAxCkB,SAACd,GACnBF,EAAKhB,MAAMc,SAASC,EAAQiB,YAAYd,KAwCxCe,OAjCa,SAACf,GACdF,EAAKhB,MAAMc,SAASC,EAAQkB,OAAOf,KAiCnCgB,cA1BoB,SAAChB,GACrBF,EAAKhB,MAAMc,SAASC,EAAQmB,cAAchB,KA0B1CiB,YA/BkB,SAACjB,GACnBF,EAAKhB,MAAMc,SAASC,EAAQoB,YAAYjB,KA+BxCkB,cAhBoB,SAAClB,GACrBF,EAAKhB,MAAMc,SAASC,EAAQqB,cAAclB,KAgB1CmB,YArBkB,SAACnB,GACnBF,EAAKhB,MAAMc,SAASC,EAAQsB,YAAYnB,KAqBxCoB,OA1Ba,SAACpB,GACdF,EAAKhB,MAAMc,SAASC,EAAQuB,OAAOpB,2BArDxCtB,EAAAA,sDAXO2B,EAAAA,WAAR,GCAAgB,EAAA,oDAICC,EAAAA,SAAQ3C,KAAA,CAAC,CACR4C,QAAS,GACTC,aAAc,GACdC,QAAS,GACTC,UAAW,CACT7C,EACAyB,SAVJ","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FlowAdaptersService {\n\n  constructor() { }\n}\n","import {Store} from '@ngrx/store';\nimport {List} from 'immutable';\nimport {Observable} from \"rxjs\";\nimport {ISearchPaginationSelectors} from \"./selectors\";\nimport {Injectable} from \"@angular/core\";\nimport {ISearchPaginationActions} from \"./actions\";\n\nexport interface ISearchPaginationModel {\n  $ids: Observable<List<string>>;\n  $loading: Observable<boolean>;\n  $query: Observable<any>;\n  $pagination: Observable<any>;\n}\n\n@Injectable()\nexport class SearchPaginationModelService {\n\n  constructor(private store: Store<any>) {\n  }\n\n  getModels<T>(selectors: ISearchPaginationSelectors): ISearchPaginationModel {\n    const $ids = this.store.select(selectors.getIds);\n    const $loading = this.store.select(selectors.getLoading);\n    const $query = this.store.select(selectors.getQuery);\n    const $pagination = this.store.select(selectors.getPagination);\n\n\n    return {\n      $ids,\n      $loading,\n      $query,\n      $pagination\n    };\n  }\n\n  dispatch(actions: ISearchPaginationActions): ISearchPaginationActions {\n\n    const clear = (params) => {\n      this.store.dispatch(actions.clear(params));\n    };\n\n    const search = (params?) => {\n      this.store.dispatch(actions.search(params));\n    };\n\n    const searchError = (params?) => {\n      this.store.dispatch(actions.searchError(params));\n    };\n\n    const searchSuccess = (params?) => {\n      this.store.dispatch(actions.searchSuccess(params));\n    };\n\n    const searchReload = (params?) => {\n      this.store.dispatch(actions.searchReload(params));\n    };\n\n\n    return {\n      clear,\n      search,\n      searchSuccess,\n      searchError,\n      searchReload\n    }\n  }\n}\n","import {Store} from '@ngrx/store';\nimport {List, Map} from 'immutable';\nimport {Observable} from \"rxjs\";\nimport {IEntitySelectors} from \"./selectors\";\nimport {Injectable} from \"@angular/core\";\nimport {IEntityActions} from \"./actions\";\n\nexport interface IEntityModel<T> {\n  $entities: Â Observable<Map<string,Â List<T>>>;\n}\n\n@Injectable()\nexport class EntityModelService {\n\n  constructor(private store: Store<any>) {\n  }\n\n  getModels<T>(selectors: IEntitySelectors<T>): IEntityModel<T> {\n    const $entities = this.store.select(selectors.getEntities);\n\n    return {\n      $entities,\n    };\n  }\n\n  dispatch(actions: IEntityActions): IEntityActions {\n\n    const add = (params) => {\n      this.store.dispatch(actions.add(params));\n    };\n\n    const addSuccess = (params?) => {\n      this.store.dispatch(actions.addSuccess(params));\n    };\n\n    const addError = (params?) => {\n      this.store.dispatch(actions.addError(params));\n    };\n\n    const find = (params?) => {\n      this.store.dispatch(actions.find(params));\n    };\n\n    const findSuccess = (params?) => {\n      this.store.dispatch(actions.findSuccess(params));\n    };\n\n    const findError = (params?) => {\n      this.store.dispatch(actions.findError(params));\n    };\n\n    const remove = (params?) => {\n      this.store.dispatch(actions.remove(params));\n    };\n\n    const removeError = (params?) => {\n      this.store.dispatch(actions.removeError(params));\n    };\n\n    const removeSuccess = (params?) => {\n      this.store.dispatch(actions.removeSuccess(params));\n    };\n\n    const update = (params?) => {\n      this.store.dispatch(actions.update(params));\n    };\n\n    const updateError = (params?) => {\n      this.store.dispatch(actions.updateError(params));\n    };\n\n    const updateSuccess = (params?) => {\n      this.store.dispatch(actions.updateSuccess(params));\n    };\n\n\n\n    return {\n      add,\n      addSuccess,\n      addError,\n      findError,\n      find,\n      findSuccess,\n      remove,\n      removeSuccess,\n      removeError,\n      updateSuccess,\n      updateError,\n      update\n    }\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {SearchPaginationModelService} from \"../search-pagination/model.service\";\nimport {EntityModelService} from \"../entity/model.service\";\n\n@NgModule({\n  imports: [],\n  declarations: [],\n  exports: [],\n  providers: [\n    SearchPaginationModelService,\n    EntityModelService\n  ]\n})\nexport class FlowAdaptersModule {\n}\n"]}